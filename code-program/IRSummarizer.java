
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import javax.swing.DefaultListModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author alasu_000
 */
public class IRSummarizer extends javax.swing.JFrame {

    /**
     * Creates new form IRSummarizer
     */
    public IRSummarizer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        jMenu1.setText("jMenu1");

        jMenu2.setText("jMenu2");

        jMenu3.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("SISTEM TEMU KEMBALI INFORMASI");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jList1.setBackground(new java.awt.Color(204, 204, 255));
        jScrollPane2.setViewportView(jList1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(237, 237, 237))
            .addGroup(layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 665, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(jTextField1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int banyakData = 5;
        LinkedList hasilStem[] = new LinkedList[banyakData];
        Preprocessing obj = null;
        Preprocessing objek = new Preprocessing();

        for (int i = 1; i <= banyakData; i++) {
            String dokumen;
            dokumen = objek.readFile1(i + ".txt");
            obj = new Preprocessing(dokumen);
            obj.Tokenization();
            obj.Filtering();
            hasilStem[i - 1] = obj.Stemming();
        }
        List<String> bagofword = obj.union(hasilStem);
        Collections.sort(bagofword);
        System.out.println("=== bag of words ===");
        for (int i = 0; i < bagofword.size(); i++) {
            System.out.println(bagofword.get(i));
        }
        System.out.println("====================");
        //query
        LinkedList preQuery[] = new LinkedList[1];
        String query = jTextField1.getText();
        Preprocessing queryP = new Preprocessing(query);
        queryP.Tokenization();
        queryP.Filtering();
        preQuery[0] = queryP.Stemming();

        //weigthing
        Weighting dokW = new Weighting(bagofword, hasilStem);
        dokW.jumlahKata();
        dokW.jumlahDf();
        System.out.println("TF");
        dokW.TF();
        System.out.println("IDF");
        dokW.IDF();
        System.out.println("TFIDF");
        dokW.TFIDF();
        dokW.printTFdanDF();
        dokW.printTFdanIDF();
        System.out.println("\n===\n");
        dokW.printTfIdf();
        System.out.println("NORM");
        dokW.Normalisasi();
        dokW.printNorm();

        //weighting query
        Weighting queryW = new Weighting(bagofword, preQuery);
        queryW.jumlahKata();
        queryW.jumlahDf();
        queryW.TF();
        queryW.TFIDF(dokW.getIDF());
        double[][] normQ = queryW.Normalisasi();

        System.out.println("cosim query");
        double[] cosSimQ = dokW.CosSim(normQ);
        dokW.printCosSimQuery();
        dokW.sort(cosSimQ);

        //dokW.retrieve();
        //MMR
        LinkedList<String> retrieve = dokW.retrieve();
        String judul[] = new String[retrieve.size()];
        String hasilRingkasan[][] = new String[retrieve.size()][1000];
        String hasilIndexRingkasan[] = new String[retrieve.size()];
        double hasilPersen[] = new double[retrieve.size()];
        String hasil[] = null;
        Weighting abcd[] = new Weighting[retrieve.size()];

        int hasilIndex[] = dokW.getIndex();
        for (int i = 0; i < hasilIndex.length; i++) {
            System.out.println("=====HASIL INDEX=====");
            System.out.println(hasilIndex[i]);
        }

        for (int k = 0; k < retrieve.size(); k++) {
            String dokumen = objek.readFile(retrieve.get(k));
            String kalimat[] = MMR.makeSentences(dokumen);
            String isiDokumen[] = new String[kalimat.length];
            LinkedList<String> hasilStem2[] = new LinkedList[kalimat.length];
            LinkedList<String> preJudul[] = new LinkedList[1];
            judul[k] = objek.getJudul();
            Preprocessing a = new Preprocessing(judul[k]);
            a.Tokenization();
            a.Filtering();
            preJudul[0] = a.Stemming();
            for (int i = 0; i < kalimat.length; i++) {
                isiDokumen[i] = kalimat[i];
                System.out.println("===============" + (i + 1) + "================");
                Preprocessing b = new Preprocessing(kalimat[i]);
                b.Tokenization();
                b.Filtering();
                hasilStem2[i] = b.Stemming();

            }

            System.out.println("hasil union");
            List<String> bagofword2 = obj.union(hasilStem2);
            Collections.sort(bagofword2);
            abcd[k] = new Weighting(bagofword2, hasilStem2);
            abcd[k].jumlahKata();
            abcd[k].jumlahDf();
            System.out.println("TF");
            abcd[k].TF();
            System.out.println("IDF");
            abcd[k].IDF();
            System.out.println("TFIDF");
            abcd[k].TFIDF();

            abcd[k].printTFdanIDF();
            System.out.println("\n===\n");
            //abcd.printTfIdf();
            System.out.println("NORM");
            abcd[k].Normalisasi();
            //abcd.printNorm();
            System.out.println("COSSIM");
            for (int i = 0; i < hasilStem2.length; i++) {
                abcd[k].CosSim(i);
            }
            abcd[k].printCosSim();
            double[][] cosSim = abcd[k].getCosSim();

            Weighting query1 = new Weighting(bagofword2, preJudul);
            query1.jumlahKata();
            query1.jumlahDf();
            query1.TF();
            query1.TFIDF(abcd[k].getIDF());
            System.out.println("VSM Query");
            double[][] normQMMR = query1.Normalisasi();

            double[] cosSimQMMR = abcd[k].CosSim(normQMMR);

            MMR ringkasan = new MMR(cosSim, cosSimQMMR, isiDokumen);
            System.out.println("hasil ringkasan : ");
            hasil = ringkasan.algorithm();
            ///hasilRingkasan[k]="";
            for (int i = 0; i < hasil.length; i++) {
                hasilRingkasan[k][i] = hasil[i];
                System.out.println(hasil[i]);
            }
            ///hasilRingkasan[k]= String.join(" \n", hasil);
            hasilIndexRingkasan[k] = ringkasan.getIndexRingkasan();
            hasilPersen[k] = ringkasan.getPersen();

        }

        for (int i = 0; i < hasilRingkasan.length; i++) {
            for (int j = 0; j < hasilRingkasan[i].length; j++) {
                if (hasilRingkasan[i][j] != null) {
                    System.out.println("Ringkasan " + i + " = " + hasilRingkasan[i][j]);
                }

            }

        }
        dokW.printMMR(hasilIndex, hasilIndexRingkasan, hasilPersen);
        DefaultListModel model = new DefaultListModel();
        jList1.setModel(model);
        for (int i = 0; i < judul.length; i++) {
            model.addElement("<html> <font size=\"+1\"><b>" + judul[i] + "</font></b></html>");
            for (int j = 0; j < hasilRingkasan[i].length; j++) {
                if (hasilRingkasan[i][j] != null) {
                    model.addElement(hasilRingkasan[i][j]);
                }

            }
            model.addElement("\n");
        }

//        // tes peringkasan
//        
//        //MMR
//        obj= new Preprocessing();
//        int hasilIndex[] = new int[10];
//        for (int i = 140; i < 150; i++) {
//            hasilIndex[i-140]=i+1;
//            System.out.println(hasilIndex[i-140]);
//        }
//        String judul[] = new String[10];
//        String hasilRingkasan[][] = new String[10][1000];
//        String hasilIndexRingkasan[] = new String[10];
//        double hasilPersen[] = new double[10];
//        String hasil[] = null;
//        Weighting abcd[] = new Weighting[10];
//        
//        
//        
//        
//        for (int k = 140; k < 150; k++) {
//            String dokumen = objek.readFile((k+1)+".txt");
//            String kalimat[] = MMR.makeSentences(dokumen);
//            String isiDokumen[] = new String[kalimat.length];
//            LinkedList<String> hasilStem2[] = new LinkedList[kalimat.length];
//            LinkedList<String> preJudul[] = new LinkedList[1];
//            judul[k-140] = objek.getJudul();
//                    Preprocessing a = new Preprocessing(judul[k-140]);
//                    a.Tokenization();
//                    a.Filtering();
//                    preJudul[0] = a.Stemming();
//            for (int i = 0; i < kalimat.length; i++) {
//                    isiDokumen[i]=kalimat[i];
//                    System.out.println("===============" + (i + 1) + "================");
//                    Preprocessing b = new Preprocessing(kalimat[i]);
//                    b.Tokenization();
//                    b.Filtering();
//                    hasilStem2[i] = b.Stemming();
//                
//            }
//
//            System.out.println("hasil union");
//            List<String> bagofword2 = obj.union(hasilStem2);
//            Collections.sort(bagofword2);
//            abcd[k-140] = new Weighting(bagofword2, hasilStem2);
//            abcd[k-140].jumlahKata();
//            abcd[k-140].jumlahDf();
//            System.out.println("TF");
//            abcd[k-140].TF();
//            System.out.println("IDF");
//            abcd[k-140].IDF();
//            System.out.println("TFIDF");
//            abcd[k-140].TFIDF();
////            abcd[k].printTFdok(1);
////            abcd[k].printTFdok(2);
////            abcd[k].printTFdok(3);
////            abcd[k].printTFdok(4);
////            if(k==1){
////               abcd[k].printTFdanDF6(); 
////            }
//
//            abcd[k-140].printTFdanIDF();
//            System.out.println("\n===\n");
//            //abcd.printTfIdf();
//            System.out.println("NORM");
//            abcd[k-140].Normalisasi();
//            //abcd.printNorm();
//            System.out.println("COSSIM");
//            for (int i = 0; i < hasilStem2.length; i++) {
//                abcd[k-140].CosSim(i);
//            }
//            abcd[k-140].printCosSim();
//            double[][] cosSim = abcd[k-140].getCosSim();
//
//            Weighting query1 = new Weighting(bagofword2, preJudul);
//            query1.jumlahKata();
//            query1.jumlahDf();
//            query1.TF();
//            query1.TFIDF(abcd[k-140].getIDF());
//            System.out.println("VSM Query");
//            double[][] normQMMR = query1.Normalisasi();
//
//            double[] cosSimQMMR = abcd[k-140].CosSim(normQMMR);
//
//            MMR ringkasan = new MMR(cosSim, cosSimQMMR, isiDokumen);
//            System.out.println("hasil ringkasan : ");
//            hasil = ringkasan.algorithm();
//            ///hasilRingkasan[k]="";
//            for (int i = 0; i < hasil.length; i++) {
//                hasilRingkasan[k-140][i] = hasil[i];
//                System.out.println(hasil[i]);
//            }
//            ///hasilRingkasan[k]= String.join(" \n", hasil);
//            hasilIndexRingkasan[k-140]=ringkasan.getIndexRingkasan();
//            hasilPersen[k-140]=ringkasan.getPersen();
//
//        }
//
//        for (int i = 0; i < hasilRingkasan.length; i++) {
//            for (int j = 0; j < hasilRingkasan[i].length; j++) {
//                if (hasilRingkasan[i][j] != null) {
//                    System.out.println("Ringkasan " + i + " = " + hasilRingkasan[i][j]);
//                }
//
//            }
//
//        }
//        Weighting dokW= new Weighting();
//        dokW.printMMR(hasilIndex, hasilIndexRingkasan, hasilPersen);
//        DefaultListModel model = new DefaultListModel();
//        jList1.setModel(model);
////        model.addElement("<html> <font size=\"+2\">This is bigger text.</font> <b>bold</b> normal</html>"); 
////        model.addElement("hello")
//        for (int i = 0; i < judul.length; i++) {
//            model.addElement("<html> <font size=\"+1\"><b>" + judul[i] + "</font></b></html>");
//            for (int j = 0; j < hasilRingkasan[i].length; j++) {
//                if (hasilRingkasan[i][j] != null) {
//                    model.addElement(hasilRingkasan[i][j]);
//                }
//
//            }
//            model.addElement("\n");
//        }
//        
//    //akhir percobaan peringkasan    

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IRSummarizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IRSummarizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IRSummarizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IRSummarizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IRSummarizer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
